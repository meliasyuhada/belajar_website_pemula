CSS atau Cascading Style Sheet atau Visualisasi berkas yang ditulis pada HTML.
=> digunakan untuk mendeklarasikan suatu nilai yang nantinya digunakan untuk mengatur sepertu apa sebuah element html ditampilkan.

keuntungan
- tampilan lebih menarik
- dapat mengontrol dan menerapkan layout secara presisi
- menghindari pekerjaan yang berulang-ulang dalam menerapkan styling
- didukung banyak browser

Tahapan Style Sheet :
- memberikan markup pada dokumen
=> contoh <div>
- menuliskan aturan styling
=> Selector + deklarasi (property + value)
=> contoh: h1 { color: green;}
        Selector  property value.
=> setelah selektor di lengkapi dengan kurung kurawal, diakhir sintaks atau value ditutup dengan ;

        selektor
        => dipanggil melalui tipe elemennya
        deklarasi
        => terdiri dari pasangan properti dengan nilainya.

Melampirkan styling pada dokumen html
- External Style Sheet
=> file css disimpan secara terpisah dengan file html. dan disimpan dengan ekstensi .css 
    dipanggil di html menggunakan element <link href="style.css">
- Embedded Style Sheet
=> kumpulan rules yang dituliskan dalam berkas HTML 
dengan menggunakan elemen <style>
- Inline Style
=> styling yang diterapkan pada elemen HTML dengan menggunakan 
atribut style. Untuk menambahkan styling properties lainnya (multiple properties), kita tuliskan dengan 
menggunakan semicolon (;) 

Commenting in Style
=> sebuah komentar tidak akan diproses oleh browser (sebagai compiler) atau lebih tepatnya 
―diabaikan‖. 
dimulai dari /* dan diakhiri dengan */

CSS Conception

- Inheritance
=> bersifat inheritance yang artinya dapat mewarisi properti style ―tertentu‖ pada 
elemen yang ada di dalamnya.
- Group Selector
=> menggabungkan selector tersebut sehingga dapat meminimalisir penulisan kode yang 
berulang. Gunakan tanda koma (,) untuk memisahkan tiap selector-nya
- Rule Order
=>  urutan dalam penulisan rules

More about Selector
Selector Basic
- Type Selector (menggunakan nama elemen sebagai target untuk diterapkannya rule.)
- Class Selector (menetapkan target elemen berdasarkan nilai dari atribut class yang diterapkan 
pada elemennya.)
- ID Selector (menetapkan target elemen berdasarkan nilai dari atribut id yang diterapkan pada 
elemennya.)
- Attribute Selector (berdasarkan sebuah atribut yang 
digunakan atau bahkan bisa lebih spesifik dengan nilainya)
- Universal Selector

Combinators
- Adjacent Sibling Selector(+) 
=> menggabungkan dua buah basic selector dengan menggunakan tanda + di antara keduanya. 
- General Sibling Selector (~)
=>  General Sibling Selector menggunakan tanda ~ untuk menetapkan elemenya. rules akan diterapkan pada seluruh elemen kedua yang berada setelah elemen pertama.
- Child Selector(>)
=>  menggabungkan dua buah basic selector dengan menggunakan tanda greater 
than (>) di antara basic selector-nya.
- Descendant Selector
=> mirip dengan child selector namun lebih luar, karena rule akan diterapkan pada seluruh elemen yang menjadi turunannya. 
=> basic selector pertama ditulis pada selector menjadi induk dan basic selector kedua akan menerapkan rule.
contoh :
        div p {
                color : #8574;
        }


Pseudo Selector
=> menergetkan elemen pada bagian yang "tidak terlihat" seperti sifat elemen, jadi untuk menetapkannya kita tidak bisa menggunakan selector biasa.
contoh 
=> :hover
        a:hover {
                color: blue;
        }
=> Untuk menggunakan pseudo-class kita gunakan tanda titik dua (:) pada basic selector kemudian diikuti dengan pseudo-class nya. 

Pseudo-elemen Selector
=> digunakan ketika kita ingin menambahkan sebuah konten tepat sebelum dan setelah sebuah elemen paragraf.
=> Untuk menggunakan pseudo-elemen kita gunakan dua buah tanda titik dua (::) kemudian diikuti dengan pseudo-elemen nya. Sebenarnya kita bisa menggunakan satu buah tanda tanda 
titik dua (:) namun kita perlu membedakannya dengan pseudo-class. Karena itulah baiknya ketika menggunakan pseudo-elemen, gunakanlah dua buah titik dua (::)
contoh :  ::before dan ::after

Formatting Text
- Font styling
=>  Dalam CSS, font ditentukan dengan menggunakan beberapa paket properti font. Kita bisa atur tipe font, ukuran, ketebalan, dan gaya. 
Berikut ini merupakan properti font yang akan kita pelajari antara lain:

 font-family : Menetapkan jenis font yang akan diterapkan pada target;
 font-size : Menentukan ukuran pada teks.
 font-weight : Menentukan ketebalan pada teks.
=>      -normal
        - bold 
        -bolder 
        -lighter
 font-style : Menetapkan styling yang diterapkan pada teks.
=>  norrmal, italic dan oblique
 font-variant : Menentukan teks untuk menggunakan gaya small caps (huruf kapital kecil).
 font : Digunakan sebagai shorthand dari properti font yang ada.


aturan penulisan font :
Selector {Property Name : Value 1, Value 2, Value 3}

contoh :
p {font-family : Arial, Verdana, sans-serif}

- Seluruh nilai font yang bukan merupakan generic font families, yang mana harus dituliskan 
secara kapital. Contohnya “Arial” bukan dituliskan “arial”.
-  Gunakan tanda koma (,) untuk memisahkan antara nilai font yang digunakan.
-  Selalu tanda kutip (―) untuk membungkus nilai font yang memiliki spasi pada 
namanya (Contohnya ―Open Sans‖)

ukuran font :
em => Font size => satuan relatif terhadap ukuran font yang sedang digunakan pada elemen
        (contoh 2em berarti 2 kali lebih besar dari ukuran font yang seharusnya.)
ex => Font height => Satuan relatif terhadap tinggi font saat ini, satuan ini sangat jarang sekali digunakan
rem => Font size => Mirip seperti em, tetapi rem merupakan satuan relatif terhadap ukuran font dari root element.
ch => Font width => Satuan relatif terhadap lebar dari karakter ―0‖ nol.
vw => Viewport width => Satuan relatif terhadap 1% lebar viewport. Contoh 1vw = 1% dari lebar viewport. Satuan ini tidak didukung pada browser IE8 ke bawah.
vh => Viewport height => Satuan relatif terhadap 1% tinggi viewport. Contoh 1vh = 1% dari tinggi viewport. Satuan ini tidak didukung pada browser IE8 ke bawah.

absolute unit
px Menetapkan nilai font berdasarkan ukuran pixel
pt Menetapkan nilai font berdasarkan points (1/72 inch di CSS2.1)
pc Menetapkan nilai font berdasarkan picas (1 pica = 12 point)
mm Menetapkan nilai font berdasarkan millimeters
cm Menetapkan nilai font berdasarkan centimeters
in Menetapkan nilai font berdasarkan inches

xx-small, x-small, small, medium, large, x-large, dan xx-large => ukuran font dari yang terkecil hingga yang terbesar.

Text styling
- line height
=> digunakan untuk mengatur jarak minimal dari garis dasar ke garis dasar dalam menampilkannya teks pada halaman
- text indent
=> menentukan nilai properti ini melalui perhitungan panjang dalam px, em, dan in atau bisa menggunakan nilai persentase (%)
- text aligment
=>      text-align: left (Membuat perataan teks pada ujung kiri)
        text-align: right (Membuat perataan teks pada ujung kanan)
        text-align: center (Membuat perataan teks secara menengah)
        text-align: justify (Membuat perataan teks yang setara pada ujung kiri dan kanannya)
- text decoration
=>      text-decoration: underline (Memberikan garis bawah (underline) pada teks)
        text-decoration: overline (Memberikan garis atas (overline) pada teks)
        text-decoration: line-through (Memberikan efek tulisan dicoret (strikethrough))
        text-decoration: none (Menghilangkan dekorasi teks yang ada pada elemen)
- text transform
=>      text-transform: none (Teks yang ditampilkan sama seperti yang dituliskan)
        text-transform: capitalize (Membuat huruf pertama besar pada tiap katanya)
        text-transform: lowercase Membuat seluruh teks menggunakan huruf kecil)
        Text-transform: uppercase ((Membuat seluruh teks menggunakan huruf besar)
- text shadow
=> contoh : text-shadow: 1px 1px 0px #000000;
+ Nilai pertama : menunjukkan seberapa jauh ke kiri atau kanan (horizontal) bayangan harus 
ditampakkan.
+ Nilai kedua : menunjukkan jarak ke atas atau ke bawah (vertical) bayangan harus 
ditampakkan.
+ Nilai Ketiga (opsional) : menentukan tingkat keburaman yang harus diterapkan pada 
bayangan.
+ Nilai Keempat : menentukan warna yang digunakan pada bayangan.

